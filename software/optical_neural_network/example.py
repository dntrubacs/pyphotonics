""" Example of using the find optical modes to find the optical modes
generated by a source at a detector position.
"""

import torch
import math
from utils import find_coordinate_matrix
from matplotlib import pyplot as plt

# this function simply calculates the optical mode (the w value from the paper)
# from a single source with an optical mode (equivalent with the weights of a
# neuron representing the amplitude and phase) at a given point (called
# detector position). The 'detector position' simply represents a point that
# could measure the amplitude and phase (the complex value of w).
# This is the function that I would like to vectorize and work with tensors of shape
# (n, n ,3) for source position, detector_position and shape (n, n) for
# source_optical_mode
def find_optical_mode(source_position: torch.tensor,
                      detector_position: torch.tensor,
                      source_optical_mode: torch.tensor,
                      wavelength: float) -> torch.tensor:
    """ Finds the optical mode at a given position from a given source.

    The output function is based on the
    Args:
        source_position: Torch tensor representing the coordinates of the
            source (x, y, z).
        detector_position: Torch tensor representing the coordinates of the
            of detector (x_i, y_i, z_i). This represents the position
            at which the optical mode is calculated.
        source_optical_mode: Torch tensor representing the source optical
            mode (complex number representing amplitude and phase).
        wavelength: Wavelength of the light.

    Returns:
        Torch tensor representing the optical mode at the detector position.
        Keep in mind that the optical mode is complex-valued.
    """
    # find the radial distance r
    r = (source_position - detector_position) ** 2
    r = torch.sqrt(torch.sum(r))

    # split equation into multiple components, so it's easier to  multiply
    # j is the imaginary number
    j = torch.tensor([1.j])

    # factor term
    factor = (source_position[2] - detector_position[2]) / r ** 2

    # inverse radius term
    inverse_distance = 1 / (2 * math.pi * r)

    # inverse wavelength
    inverse_wavelength = 1 / (j * wavelength)

    # exponential term
    exponential_term = torch.exp(j * 2 * math.pi * r / wavelength)

    # calculate the optical mode and return it
    w = factor * (inverse_distance + inverse_wavelength) * exponential_term
    return w * source_optical_mode


# This function simply uses find_optical_mode to work out the superposition
# of optical modes generated by multiple sources (placed in matrix of,
# equivalent with a physical layer) at a single detector point. This function
# will greatly benefit from having find_optical_mode vectorized as for now it
# simply loop through all source position to work out the superposition
def find_optical_mode_from_source_array(
        source_matrix_position: torch.tensor,
        detector_position: torch.tensor,
        source_matrix_optical_mode: torch.tensor,
        wavelength: float) -> torch.tensor:
    """ Finds the optical mode from a given matrix of sources at a given
    detector position.

    Args:
        source_matrix_position: Tensor representing the position of all
            sources (n_source, n_source, 3) where the last entry is (x, y, z)
        detector_position: Torch tensor representing the coordinates of the
            of detector (x_i, y_i, z_i). This represents the position
            at which the optical mode is calculated.
        source_matrix_optical_mode: Torch tensor representing the optical modes
            of all sources from the array.
        wavelength: Wavelength of the light.

    Returns:
        Torch tensor representing the optical mode at the detector position.
        Keep in mind that the optical mode is complex-valued.
    """
    # the optical mode given from the sum off all sources
    total_optical_mode = torch.tensor([0 + 0j])

    # find the optical mode for each source in the matrix
    for i in range(source_matrix_position.shape[0]):
        for j in range(source_matrix_position.shape[1]):
            optical_mode = find_optical_mode(
                source_position=source_matrix_position[i][j],
                detector_position=detector_position,
                source_optical_mode=source_matrix_optical_mode[i][j],
                wavelength=wavelength
            )

            # add the optical mode to the total optical mode
            total_optical_mode = torch.add(
                total_optical_mode, optical_mode
            )

    # return the total optical mode
    return total_optical_mode

# This function uses find_optical_mode_from_source_array to find all the
# optical modes at multiple detector positions (a matrix of them). This
# function will also benefit from vectorization as it simply loops through
# all the detector positions to find the optical mode at each point.
def find_optical_modes(source_matrix_position: torch.tensor,
                       detector_matrix_position: torch.tensor,
                       source_matrix_optical_mode: torch.tensor,
                       wavelength: float) -> torch.tensor:
    """ Finds the optical modes from a given matrix of sources at a given
    matrix of detector positions.

    Args:
        source_matrix_position: Tensor representing the position of all
            sources (n_source, n_source, 3) where the last entry is (x, y, z)
        detector_matrix_position: Tensor representing the position of all
            sources (n_detector, n_detector, 3) where the last entry is
            (x_i, y_i, z_i). This represents the position at which the optical
            modes are  calculated.
        source_matrix_optical_mode: Torch tensor representing the optical modes
            of all sources from the array.
        wavelength: Wavelength of the light.

    Returns:
        Torch tensor representing the optical mode at the detector position.
        Keep in mind that the optical mode is complex-valued.
    """
    # generate a tensor of the same shape as detector_matrix_position
    # but only one entry (complex-valued) for the optical modes
    optical_modes = torch.zeros(size=(detector_matrix_position.shape[0],
                                      detector_matrix_position.shape[1]),
                                dtype=torch.cfloat
                                )
    # go through each element and find it's corresponding optical mode
    for i in range(detector_matrix_position.shape[0]):
        for j in range(detector_matrix_position.shape[1]):
            # optical mode at a given detector point
            optical_mode = find_optical_mode_from_source_array(
                source_matrix_position=source_matrix_position,
                detector_position=detector_matrix_position[i][j],
                source_matrix_optical_mode=source_matrix_optical_mode,
                wavelength=wavelength
            )
            # give the value of optical mode tp each entry in the optical modes
            # tensor
            optical_modes[i][j] = optical_mode

    # return the optical modes
    return optical_modes


########## Examples #############################################
# Example of using the function find_optical_mode
# for calculating the mode of a single source at
# a single point
# position of the source (x=1, y=1, z=0), equivalent with (x_i, y_i, z_i) in
# notation from the paper
example_source_position = torch.tensor([1.0, 1.0, 0.0])

# optical mode opf the source (complex number with amplitude and phase)
example_source_optical_mode = torch.tensor([1.0 + 0.j])

# position of the detector (the place where we measure the optical mode
# generated by the source) (x=1, y=1, z=1), equivalent with the (x, y, z)
# in the notation from the paper
example_detector_position = torch.tensor([1.0, 1.0, 1.0])

# find the optical mode for the given source and detector
example_optical_mode = find_optical_mode(
    source_position=example_source_position,
    detector_position=example_detector_position,
    source_optical_mode=example_source_optical_mode,
    wavelength=652E-9
)


### Example of using the find_optical_modes to find the optical modes generated
### by multiple sources (a matrix of sources) at a matrix of detectors.
# generate a tensor of size (10, 10, 3) where each entry (source[i][j])
# represents a position (x, y, z) of a source
example_source_matrix_positions = find_coordinate_matrix(n_size=10, n_length=1,
                                                         z_coordinate=0)
example_source_matrix_positions = torch.from_numpy(
    example_source_matrix_positions)

# generate a tensor of size (10, 10, 3) where each entry (source[i][j])
# represents a position (x, y, z) of a detector
example_detector_matrix_positions = find_coordinate_matrix(n_size=10,
                                                           n_length=1,
                                                           z_coordinate=1)
example_detector_matrix_positions = torch.from_numpy(
    example_detector_matrix_positions)

# simply put the all the sources to be coherent light (amplitude 1 and phase 0)
# the tensor size is (10, 10)
example_source_matrix_optical_modes = torch.ones(size=(10, 10))

# calculate the all the optical modes using the find_optical_modes
optical_modes_matrix = find_optical_modes(
    source_matrix_position=example_source_matrix_positions,
    detector_matrix_position=example_detector_matrix_positions,
    source_matrix_optical_mode=example_source_matrix_optical_modes,
    wavelength=652E-9)

# this code is simply to plot the optical modes (only the absolute values of
# them) for visual feedback and keep as a reference
plot_optical_modes = torch.abs(optical_modes_matrix).detach().cpu().numpy()
plt.imshow(plot_optical_modes)
plt.show()








